# Generated by Django 5.1.2 on 2024-11-02 01:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Jury',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('surname', models.CharField(max_length=50, verbose_name='Surname')),
                ('email', models.EmailField(blank=True, help_text='This address will be used to send the participant every important infos about the tournament.', max_length=254, verbose_name='Email')),
                ('affiliation', models.CharField(blank=True, help_text='Will be used for export (badges and web).', max_length=100, verbose_name='Affiliation to display')),
                ('pf1', models.BooleanField(default=False, verbose_name='PF 1')),
                ('pf2', models.BooleanField(default=False, verbose_name='PF 2')),
                ('pf3', models.BooleanField(default=False, verbose_name='PF 3')),
                ('pf4', models.BooleanField(default=False, verbose_name='PF 4')),
                ('final', models.BooleanField(default=False, verbose_name='Final')),
                ('remark', models.TextField(blank=True, verbose_name='Remarks')),
            ],
            options={
                'verbose_name': 'Juror',
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=50, verbose_name='Name')),
                ('surname', models.CharField(default=None, max_length=50, verbose_name='Surname')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('D', 'Decline to report')], max_length=1, verbose_name='Gender')),
                ('email', models.EmailField(blank=True, help_text='This address will be used to send the participant every important infos about the tournament.', max_length=254, verbose_name='Email')),
                ('phone_number', models.CharField(blank=True, help_text='Compulsory for the Team Leaders.', max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('passport_number', models.CharField(blank=True, max_length=50)),
                ('birthdate', models.DateField(default='1900-01-31', verbose_name='Birthdate')),
                ('role', models.CharField(choices=[('TM', 'Team Member'), ('TC', 'Team Captain'), ('TL', 'Team Leader'), ('ACC', 'Accompanying')], default='TM', help_text="The team must consist of a Team Captain (student), between two and five Team Members (students), and between one and two Team Leaders (Prof., PhD, Postdoc in physics). Don't forget to register yourself!", max_length=20, verbose_name='Role')),
                ('affiliation', models.CharField(blank=True, default='XXX University', max_length=50)),
                ('status', models.CharField(blank=True, choices=[('B', 'Bachelor student'), ('M', 'Master student'), ('S', 'Specialist student'), ('O', 'Other')], max_length=1, verbose_name='Student status')),
                ('veteran', models.BooleanField(default=False, help_text='Has the participant already participated in the tournament? (informative only)', verbose_name='Veteran')),
                ('diet', models.CharField(blank=True, choices=[('NO', 'No specific diet'), ('NOPORK', 'No pork'), ('NOMEAT', 'No meat'), ('NOFISH', 'No fish'), ('NOMEAT_NOEGG', 'No meat, No eggs'), ('OTHER', 'Other (see remarks)')], help_text='Does the participant have a specific diet?', max_length=20)),
                ('mixed_gender_accommodation', models.BooleanField(default=True, help_text='Is it ok for the participant to be in a mixed gender hotel room?', verbose_name='Mixed gender accommodation?')),
                ('shirt_size', models.CharField(blank=True, choices=[('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'Extra Large')], max_length=2)),
                ('remark', models.TextField(blank=True, verbose_name='Remarks')),
                ('total_points', models.FloatField(default=0.0, editable=False)),
                ('mean_score_as_reporter', models.FloatField(default=0.0, editable=False)),
                ('mean_score_as_opponent', models.FloatField(default=0.0, editable=False)),
                ('mean_score_as_reviewer', models.FloatField(default=0.0, editable=False)),
                ('tot_score_as_reporter', models.FloatField(default=0.0, editable=False)),
                ('tot_score_as_opponent', models.FloatField(default=0.0, editable=False)),
                ('tot_score_as_reviewer', models.FloatField(default=0.0, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=50)),
                ('description', models.TextField(default=None, max_length=4096)),
                ('author', models.CharField(blank=True, default='', max_length=128)),
                ('mean_score_of_reporters', models.FloatField(default=0.0, editable=False)),
                ('mean_score_of_opponents', models.FloatField(default=0.0, editable=False)),
                ('mean_score_of_reviewers', models.FloatField(default=0.0, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('link', models.CharField(blank=True, default='', max_length=2083)),
            ],
        ),
        migrations.CreateModel(
            name='SiteConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('only_staff_access', models.BooleanField(default=False)),
                ('display_link_to_final_on_ranking_page', models.BooleanField(default=False)),
                ('display_final_ranking_on_ranking_page', models.BooleanField(default=False)),
                ('do_not_display_tactical_rejections', models.BooleanField(default=False)),
                ('display_eternal_rejections_on_team_page', models.BooleanField(default=True)),
                ('update_scores_manually', models.BooleanField(default=False)),
                ('image_link_URL', models.URLField(default='http://blueballfixed.ytmnd.com/')),
                ('image_URL', models.URLField(default='http://i.imgur.com/QH8aoXL.gif')),
                ('image_repeat_count', models.IntegerField(default=6)),
            ],
            options={
                'verbose_name': 'Site Configuration',
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pf_number', models.IntegerField(choices=[(1, 'Fight Seletiva 1'), (2, 'Fight Seletiva 2'), (3, 'Fight Seletiva 3'), (4, 'Fight Seletiva 4'), (5, 'Semifinal 1'), (6, 'Semifinal 2'), (7, 'BPT Final')], default=None)),
                ('round_number', models.IntegerField(choices=[(1, 'Round 1'), (2, 'Round 2'), (3, 'Round 3'), (4, 'Round 4')], default=None)),
                ('submitted_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('score_reporter', models.FloatField(default=0.0, editable=False)),
                ('score_opponent', models.FloatField(default=0.0, editable=False)),
                ('score_reviewer', models.FloatField(default=0.0, editable=False)),
                ('points_reporter', models.FloatField(default=0.0, editable=False)),
                ('points_opponent', models.FloatField(default=0.0, editable=False)),
                ('points_reviewer', models.FloatField(default=0.0, editable=False)),
                ('bonus_points_reporter', models.FloatField(default=0.0, editable=False)),
                ('opponent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='opponent_name', to='BPT.participant')),
                ('problem_presented', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='BPT.problem')),
                ('reporter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reporter_name_1', to='BPT.participant')),
                ('reporter_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reporter_name_2', to='BPT.participant')),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewer_name', to='BPT.participant')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BPT.room')),
            ],
            options={
                'permissions': (('update_all', 'Can see and trigger update_all links'),),
            },
        ),
        migrations.CreateModel(
            name='JuryGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_reporter', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=None)),
                ('grade_opponent', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=None)),
                ('grade_reviewer', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=None)),
                ('jury', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BPT.jury')),
                ('round', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='BPT.round')),
            ],
        ),
        migrations.CreateModel(
            name='EternalRejection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_free', models.BooleanField(default=False, verbose_name='Extra free rejection')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BPT.problem')),
                ('round', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='BPT.round')),
            ],
        ),
        migrations.CreateModel(
            name='TacticalRejection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_free', models.BooleanField(default=False, verbose_name='Extra free rejection')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BPT.problem')),
                ('round', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='BPT.round')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('surname', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('pool', models.CharField(blank=True, choices=[('A', 'Pool A'), ('B', 'Pool B'), ('O', 'Not attributed')], max_length=1, null=True, verbose_name='Pool')),
                ('total_points', models.FloatField(default=0.0, editable=False)),
                ('semi_points', models.FloatField(default=0.0, editable=False)),
                ('final_points', models.FloatField(default=0.0, editable=False)),
                ('is_in_semi', models.BooleanField(default=False)),
                ('is_in_final', models.BooleanField(default=False)),
                ('bonus_points', models.FloatField(default=0.0, editable=False)),
                ('nrounds_as_rep', models.IntegerField(default=0, editable=False)),
                ('nrounds_as_opp', models.IntegerField(default=0, editable=False)),
                ('nrounds_as_rev', models.IntegerField(default=0, editable=False)),
                ('IOC', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Team_BPT', to=settings.AUTH_USER_MODEL, verbose_name='Admin')),
            ],
        ),
        migrations.CreateModel(
            name='SupplementaryMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('link', models.CharField(max_length=5000)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BPT.problem')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='BPT.team')),
            ],
        ),
        migrations.AddField(
            model_name='round',
            name='opponent_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='opponentteam', to='BPT.team'),
        ),
        migrations.AddField(
            model_name='round',
            name='reporter_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reporterteam', to='BPT.team'),
        ),
        migrations.AddField(
            model_name='round',
            name='reviewer_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewerteam', to='BPT.team'),
        ),
        migrations.AddField(
            model_name='participant',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='BPT.team', verbose_name='Team'),
        ),
        migrations.AddField(
            model_name='jury',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='BPT.team'),
        ),
        migrations.CreateModel(
            name='AprioriRejection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BPT.problem')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='BPT.team')),
            ],
        ),
    ]
